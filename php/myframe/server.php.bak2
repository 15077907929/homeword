<?php
	$readfds=array();
	$writefds=array();
	$sock=socket_create_listen(8008);
	socket_set_nonblock($sock);	//非阻塞
	socket_getsockname($sock,$addr,$port);
	print 'Server Listening on '.$addr.':'.$port."\n";
	$readfds[(int)$sock]=$sock;
	$conn=socket_accept($sock);
	$readfds[]=$conn;
	$e=null;
	$t=100;
	$i=1;
	while(true){
		echo "No.$i\n";
		//当select处于等待时，两个客户端中甲先发数据来，则socket_select会在readfds中保留甲的socket，并往下运行，另一个客户端的
		//socket就被丢弃了，所以再次循环时，变成只监听甲了，这个可以在新循环中把所有链接的客户端socket再次加进readfds中，避免逻
		//辑错误
		echo @socket_select($readfds,$writefds,$e,$t)."\n";
		var_dump($readfds);
		if(in_array($sock,$readfds)){
			echo '8008 port is activity'."\n";
			$readfds[]=socket_accept($sock);
		}
		//将读取的资源输出
		foreach($readfds as $s){
			if($s!=$sock){
				//新连接到来时，被监听的端口是活跃的，如果是新数据到来或者客户端关闭时，活跃的是对应的客户端socket，而不是服务
				//上被监听的端口
				//如果客户端发来的信息没有被读走，则socket_select将会始终显示客户端是活跃的，并将其保存在readfds数组中
				//如果客户端先关闭，则必须手动关闭服务器上相对应的客户端socket；否则socket_select也始终显示该客户端活跃
				//(这个道理跟"有新连接到来然后没有用socket_accept把它读出来，导致监听的端口一直活跃"是一样的
				$result=@socket_read($s,1024,PHP_NORMAL_READ);
				socket_write($s,$result,strlen($result));
				if($result===false){
					$err_code=socket_last_error();
					$err_test=socket_strerror($err_code);
					echo 'client '.(int)$s.' has closed ['.$err_code.':'.$err_test.']'."\n";
					//手动关闭客户端，最好清除一下$readfds数组中对应的元素
					socket_shutdown($s);
					socket_close($s);
				}else{
					echo $result;
				}
			}
		}
		usleep(3000000);
		$readfds[(int)$sock]=$sock;
		$i++;
	}