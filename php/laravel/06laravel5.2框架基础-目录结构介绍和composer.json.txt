目录结构和composer.json解析
开发工具
	phpstorm
框架概况
	目录结构
		app：包含controller、model、路由等在内的应用目录，大部分业务在该目录下进行
			Console：
				kernel.php：命令调用内核文件包含commands变量(命令清单，自定义的命令需追加到这里)和schedule方法(用于任务调度，即定时任务)
			Exceptions：包含了自定义错误和异常处理类
			Http：
				Controllers：控制器目录
				Middleware：中间件目录
				Kernel.php：包含http中间件和路由中间件的内核文件
			Providers：服务提供者目录
			User.php：自带的模型实例，我们新建的model也默认存储在该目录
		bootstrap：框架启动载入目录
			app.php：创建框架应用实例
			autoload.php：自动加载
			cache：存放框架启动缓存，web服务器需要有该目录的写入权限
		config：各种配置文件的目录
			app.php：系统级配置文件
			auth.php：用户身份认证配置文件，指定好table和model就可以很方便地用身份认证功能了
			broadcasting.php：事件广播配置文件
			cache.php：缓存配置文件
			database.php：数据库配置文件
			filesystems.php：文件系统配置文件，这里可以配置云存储参数
			mail.php：电子邮件配置文件
			queue.php：消息队列配置文件
			services.php：可存放第三方服务的配置信息
			session.php：配置session的存储方式、生命周期等信息
			view.php：模板文件配置文件，包括模板目录和编译目录等
		database：数据库相关目录
			factories：5.1版本以上的新特性，工厂类目录，也是用于数据填充
				ModelFactory.php：在该文件可定义不同model所需填充的数据元素
			migrations：存储数据库迁移文件
			seeds：存放数据库填充类的目录
				DatabaseSeeder.php：执行php artisan db:seed命令将会调用该类的run方法。该方法可调用执行该目录下其他
					seeder类，也可调用factories方法生
			.htaccess：apache服成
		public：网站入口，应该将ip或域名指向该目录而不是根目录，可供外部访问的css、js和图片等资源皆放置于此
			index.php：入口文件务器用该文件重写url
			web.config：iis服务器用该文件重写url
		resources：资源文件目录
			assets：可存放包含less、sass、coffeescript在内的原始资源文件
			lang：本地化文件目录
			views：视图文件存放目录
		storage：存储目录，web服务器需要有该目录及所有子目录的写入权限
			app：可用于存储应用程序所需的一些文件
			framework：该目录下包含缓存、session和编译后的视图文件
			logs：日志目录
		tests：测试目录
		vendor：该目录下包含laravel源代码和第三方依赖包
		.env：环境配置文件，config目录下的配置文件会使用该文件里面的参数，不同生成环境使用不同的.env文件即可
		artisan：强大的命令行接口
		composer.json：存放依赖关系的文件
		composer.lock：锁文件，存放安装时依赖包的真是版本
		package.json：gulp配置文件
		phpunit.xml：phpunit(一种php测试框架)配置文件
		server.php：php内置的web服务器把这个目录作文入口。以public/index.php为入口的可忽略掉该文件
		
	composer.json
		"name": "laravel/laravel",	项目名称
		"description": "The Laravel Framework.",	描述
		"keywords": ["framework", "laravel"],	关键词
		"license": "MIT",	许可协议
		"type": "project",	类型
		"require": {
			"php": ">=5.6.4",	php版本
			"laravel/framework": "5.4.*",	框架版本
			"laravel/tinker": "~1.0"
		},		
		"require-dev": {	依赖包
			"fzaninotto/faker": "~1.4",
			"mockery/mockery": "0.9.*",
			"phpunit/phpunit": "~5.7"
		},		
		"autoload": {	自动加载
			"classmap": [
				"database"
			],
			"psr-4": {	一种自动加载的规范
				"App\\": "app/"
			}
		},		
		"autoload-dev": {	加载测试
			"psr-4": {
				"Tests\\": "tests/"
			}
		},		
		"scripts": {	执行脚本
			"post-root-package-install": [
				"php -r \"file_exists('.env') || copy('.env.example', '.env');\""
			],
			"post-create-project-cmd": [
				"php artisan key:generate"
			],
			"post-install-cmd": [
				"Illuminate\\Foundation\\ComposerScripts::postInstall",
				"php artisan optimize"
			],
			"post-update-cmd": [
				"Illuminate\\Foundation\\ComposerScripts::postUpdate",
				"php artisan optimize"
			]
		},	
		"config": {	配置项
			"preferred-install": "dist",	优先安装压缩版
			"sort-packages": true,
			"optimize-autoloader": true
		}