21.1	认识WebSocket
	Socket又称为套接字，是基于W3C标准开发的、在TCP接口中进行双向通信的技术。目前，大部分浏览器都支持HTML5的Web Sockets API.
21.1.1	WebSocket基础
	WebSocket 是一个持久化的协议，这是相对于HTTP非持久化来说的。
	例如，HTTP1.0 的生命周期是以request(请求)作为界定的，一个request对应一个response(响应)，本次client(客户端)与sever(服务器端)
的会话到此结束；在 HTTP1.1 中，稍微有所改进，即加了keep-alive，也就是在一个HTTP连接中可以进行多个request请求和多个response响应
操作。
	然而，在实时通信中，HTTP 并没有多大的作用，HTTP 只能由client发起请求，server才能返回信息，server不能主动向client推送信息，无
法满足实时通信的需求。
	WebSocket可以进行持久化连接，client只需要一次握手(类似request)，成功后即可持续进行数据通信，实现client和server之间全双工通
信(双向同时通信)，即通信的双方可以同时发送和接收信息的交互方式。
	下图演示了client和server之间建立 WebSocket 连接时握手部分，这个部分在Node.js中可以十分轻松的完成，因为Node.js提供的net模块已
经对Socket套接字做了封装处理，开发者使用的时候只需要考虑数据的交互，而不用处理连接的建立。
					1.发送 Sec-WebSocket-Key
					---------------------------------→
			client	2.加密返回 Sec-WebSocket-Accept
			(客户端)←---------------------------------server
					3.本地校验						  (服务器端)
					---------------------------------→
				WebSocket 连接时握手示意图
	client与server建立Socket时，握手的会话内容也就是request与response的过程。
21.1.2	WebSockets API开发框架
	WebSockets API 为搭建Web应用程序提供了一种新的架构。解决了低成本、高处理的海量客户端请求。目前，使用PHP开发语言实现这种应用
架构的开发框架主要包括Workerman等。
21.1.3	浏览器兼容性
	国际上标准的 WebSocket 协议为 RFC6455 协议(通过 IETF 批准)。目前为止，Chrome 15+、Firefox 11+，以及IE 10 版本的浏览器均支持
该协议，包括该协议中定义的二进制数据的传送。
21.1.4	应用场景
	WebSockets API 适用于当多个客户端与同一个服务器需要实现实时通信的场景。具体如下：
	·多人在线游戏网站。
	·聊天室。
	·实时体育或新闻评论网站。
	·实时交互用户信息的社交网站。

	
	
注释：
	W3C：万维网联盟
	
	
	
	
	
	
	
	
	
	
	
	