21.2	在PHP中使用Socket
	PHP 实现Socket服务主要使用PHP的socket扩展函数库。本节将简单介绍如何正确使用Socket。
21.2.1	启动 socket
	在PHP中socket扩展库默认是按照。如果没有安装，必须设置php.ini配置文件，即将配置文件的";extension=php_sockets.dll"选项前的分
号";"删除，保存修改后的文件，并重新启动Apache服务器即可。
	在重新加载socket扩展后，可以通过PHPinfo()函数获取Sockets Support是否启动。
	提示：
	在Linux下给PHP安装socket扩展，方法如下：
	#cd /home/php/ext/sockets
	#/server/php/bin/phpize
	#./configure --prefix=/usr/local/php/lib --with-php-config=/server/php/bin/php-config --enable-sockets
	#make
	#make install
	修改/usr/local/php/etc/php.ini文件，PHP5.4版本以上不要加扩展路径。
	#extension_dir="/usr/local/php/lib/php/extensions/no-debug-non-zts-20090626"
	extension=sockets.so
	重启Apache或者nginx等服务器即可。
21.2.2	PHP套接字通信流程
	建立socket连接至少需要一对套接字，其中一个运行于客户端，成为Client Socket；另一个运行于服务器端，称为Server Socket。socket
通信演示过程如下图所示。
											TCP服务器端
											socket()
												↓
											bind()
												↓
											listen()
												↓
			TCP客户端						accept()
			socket()							↓
				↓		建立连接		阻塞直到有客户端连接
			connect()←-------------------------→|
				↓		请求数据				↓
		---→write()←-------------------------→read()←--------
		|		|					   处理请求	|			|
		|		↓		回应数据				↓			|
		----read()←-------------------------→write()----------
				↓		结束连接				↓
			close()←-------------------------→read()
												↓
											close()
			socket通讯示意图
	套接字之间的连接过程可以分为3步：
	第1步，服务器监听。服务器端套接字并不定位具体的客户端套接字，而是出于等待连接的状态，实时监控网络状态，等待客户端的连接请
求。
	第2步，客户端请求。客户端的套接字提出连接请求，要连接的目标是服务器端的套接字。因此，客户端的套接字应先描述要连接的服务器
的套接字，指出服务器端套接字的IP地址和端口号，然后就向服务器端套接字提出连接请求。
	第3步，连接确认。当服务器端套接字监听到，或者接收到客户端套接字的连接请求时，就响应客户端套接字的请求，建立一个新的连接，
把服务器端套接字的描述发给客户端，一旦客户端确认了此描述，双方就正式建立连接。	
	而此时服务器端套接字继续处于监听状态，继续接收其他客户端套接字的连接请求。

	提示：
	TCP/IP、UDP、Socket之间的关系。
	什么是TCP/IP、UDP？
	TCP/IP(Transmission Control Protocol/Internet Protocol)，即传输控制协议/网间协议，是一个工业标准的协议集，它是为广域网(WANs)
设计的。
	UDP(User Data Protocol，用户数据报协议)是与TCP相对应的协议它是隶属于TCP/IP协议族中的一种。这些协议的关系如下图所示。
			用户进程		用户进程		用户进程		用户进程							应用层
				↑				↑				↑				↑
				|				|				|				|
				|				↓				|				↓
				|			   TCP			   	|			   UDP								传输层
				|				↑				|				↑
				↓				|				↓				|
			  ICMP(也与IP交互)	---------------→IP←--------------	IGMP(也与IP交互)			网络层
												↑
												|
												↓
								APR←--------→硬件接口←--------→RAPR								链路层
												↑
												|
												↓
											  媒体
											  
	TCP/IP协议族包括传输层、网络层、链路层。TCP/IP与UDP的关系如上图所示。							   
	Socket在哪里呢?
	在上图中，没有看到Socket的影子，那么它到底在哪里呢？原来Socket在这里，如下图所示。
			用户进程		用户进程		用户进程		用户进程							应用层
				↑				↑				↑				↑
				|				|				|				|
				↓				↓				↓				↓
								  Socket抽象层
				↑				↑				↑				↑
								|				|				|
								↓				|				↓
				|			   TCP			   	|			   UDP								传输层
				|				↑				|				↑
				↓				|				↓				|
			  ICMP(也与IP交互)	---------------→IP←--------------	IGMP(也与IP交互)			网络层
												↑
												|
												↓
								APR←--------→硬件接口←--------→RAPR								链路层
												↑
												|
												↓
											  媒体	

	Socket是应用层与TCP/IP协议族通信的中间软件抽象层，它是一组接口。在设计模式中，Socket其实就是一个门面模式，它把复杂的TCP/IP
协议族隐藏在Socket接口后面，对用户来说，一组简单的接口就是全部，让Socket去组织数据，以符合指定的协议。
	如何使用他们
	网络通信比较复杂，但是经过多年的技术创新，网络间的通信也就简单了许多，但毕竟还是有挺多工作要做的。Socket编程比较高深，但是
只要弄清Socket编程的工作原理，也很容易理解。
	一个生活中的场景。你要打电话给一个朋友，先拨号，朋友听到电话铃声后提起电话，这时你和你的朋友就建立起了连接，就可以讲话了。
等交流结束，挂断电话结束此次交谈。生活中的场景就解释了这工作原理，也许TCP/IP协议族就是诞生于生活中。
	先从服务器端说起。服务器端先初始化Socket，然后与端口绑定(bind)，对端口进行监听(listen)，调用accept阻塞，等待客户端连接。在
这时如果有个客户端初始化一个Socket，然后连接服务器(connect)，如果连接成功，这时客户端与服务器端的连接就建立了。客户端发送数据请
求，服务器端接收请求并处理请求，然后把回应数据发送给客户端，客户端读取数据，然后关闭连接，一次交互结束。
21.2.3	PHP套接字通信方法
	socket建立连接的过程与MySQL的客户端和服务端的连接本质是一样的，socket编程就是要自己建立一个类似于MySQL的服务端和客户端的应
用。而它与MySQL不同的是，MySQL的服务端和客户端都已经被封装好了，用户只要应用就行了。但是，socket扩展仅定义了几十个函数，使用PHP
进行socket编程，应该先了解socket函数，以及它们的关系和功能。
	下面介绍socket的几个关键函数，了解它们各自的作用。
	1.创建套接字
	socket_create($net,$stream,$protocol)
	该函数创建一个socket套接字，简单说就是创建一个网络数据流。socket套接字也称为一个通讯节点。一个典型的网络连接由2个套接字构
成：一个运行在客户端，另一个运行在服务器端。
	如果该函数运行成功，则返回一个包含socket对象的资源类型；如果没有成功，则返回false。参数说明如下。
	·net：定义网络协议。包括下面选项。
	AF_INET：IPv4网络协议。TCP和UDP都可以使用此协议。一般都用这个。
	AF_INET6：IPv6网络协议。TCP和UDP都可以使用此协议。
	AF_UNIX：本地通讯协议。具有高性能和低成本的IPC(进程间通讯)。
	·stream：定义套接字流或类型，包括：SOCK_STREAM、SCOK_DGRAM、SOCK_SEQPACKET、SOCK_RAW、SOCK_RDM，详细说明可以参考PHP手册，
	这里仅介绍前两个选项。
	SOCK_STREAM：TCP协议套接字。
	SOCK_DGRAM：UDP协议套接字。
	·protocol：定义当前套接字的具体协议，包括下面选项
	SOL_TCP：TCP协议。
	SOL_UDP：UDP协议。
	ICMP：互联网控制消息协议。
	提示：
	socket_create()函数的第二个参数和第三个参数是相关联的。如果第一个参数选用IPv4协议：AF_INET，那么第二个参数应该选用TCP套接
	字：SOCKET_STREAM，第三个参数选用SOL_TCP。
	2.连接套接字
	socket_connect($socket,$ip,$port)
	该函数连接一个套接字。如果连接成功，则返回true，否则返回false。参数说明如下。
	·socket：socket_create()函数的返回值。
	·ip：IP地址。
	·port：端口号。
	3.绑定套接字
	socket_bind($socket,$ip,$port)
	该函数绑定一个套接字。如果绑定成功返回true，否则返回false。参数说明如下。
	·socket：socket_create()函数的返回值。
	·ip：IP地址。
	·port：端口号。	
	4.监听套接字
	socket_listen($socket,$backlog)
	该函数监听一个套接字。如果监听成功，则返回true，否则返回false。参数说明如下。
	·socket：socket_create()函数的返回值。
	·backlog：最大监听套接字个数
	5.接收套接字资源
	socket_accept($socket)
	该函数接收套接字资源。如果成功，则返回套接字的信息资源；如果失败，则返回false。参数说明如下。
	·socket：socket_create()函数的返回值。
	6.读取套接字的资源
	socket_read($socket,$length)
	该函数读取套接字的资源信息。如果读取成功，则把套接字的资源转换为字符串信息返回；如果失败，则返回false。参数说明如下。
	·socket：socket_create()或socket_accept()函数的返回值。
	·length：读取的字符串长度。
	7.写入套接字
	socket_write($socket,$msg,$strlen)
	该函数把数据写入套接字中。写入成功时，返回字符串的字节长度，写入失败返回false。参数说明如下。
	·socket：socket_create()或socket_accept函数的返回值。
	·msg：写入的字符串。
	·strlen：写入的字符串的长度。
	8.关闭套接字
	socket_close($socket)
	该函数将关闭套接字。成功时返回true，失败时返回false。参数说明如下。
	·socket：socket_create()或socket_accept()函数的返回值。
	上面8个函数是socket的核心函数。关于PHP的socket函数库详细说明可以参考PHP参考手册。
	下面再介绍3个比较重要的函数。在socket编程的时候，可以当做调试用。
	socket_last_error($socket)，参数为socket_create()的返回值，作用是获取套接字的最后一条错误码号，返回值是套接字code。
	socket_strerror($code)，参数为socket_last_error函数的返回值，获取code的字符串信息，返回值也就是套接字的错误信息。
	socket_set_option($socket,$level,$optname,$optval)，作用是给套接字设置数据量选项。参数socket表示套接字对象，后面几个参数为
设置项。
	提示：
	上面socket_bind()、socket_listen()、socket_accept()三个函数的执行顺序不可更改，也就是说必选先执行socket_bind()，再执行
socket_listen()，最后执行socket_accept()。
21.2.4	案例：设计第一个套接字连接
	下面我们尝试使用PHP的套接字扩展函数库，设计一个使用套接字通信的示例。
	[操作步骤]
	第1步，新建服务器端处理脚本，保存为server.php。然后输入下面代码：
	<?php
		//创建服务端的socket套接字，net协议为IPv4，protocol协议为TCP
		$socket=socket_create(AF_INET,SOCK_STREAM,SOL_TCP);
		//绑定接收的套接字主机和端口号，与客户端相对应
		//127.0.0.1是本地主机地址，如果有多台电脑，可以写IP地址
		if(socket_bind($socket,'192.168.1.121','8888')==false){
			echo '套接字绑定失败：'.socket_strerror(socket_last_error());
		}
		//监听套接字
		if(socket_listen($socket,4)==false){
			echo '套接字监听失败：'.socket_strerror(socket_last_error());
		}
		//让服务器无限获取客户端传过来的信息
		do{
			//接收客户端传过来的信息
			//socket_accept的作用就是接收socket_bind()所绑定的主机发过来的套接字
			$accept_resource=socket_accept($socket);
			if($accept_resource!==false){
				//读取客户端传过来的资源，并转换为字符串
				//socket_read的作用就是读出socket_accept()的资源并把它转化为字符串
				$string=socket_read($accept_resource,1024);
				echo '服务器接收信息：'.$string.PHP_EOL;	//PHP_EOL为php的换行预定义常量
				if($string!=false){
					$return_client='服务器接收信息：'.$string.PHP_EOL;
					//向socket_accept的套接字写入信息，也就是回馈信息给socket_bind()所绑定的主机客户端
					socket_write($accept_resource,$return_client,strlen($return_client));
					//socket_write的作用是向socket_create的套接字写入信息，或者向socket_accept的套接字写入信息
				}else{
					echo '套接字读取失败'.socket_strerror(socket_last_error());
				}
				//socket_close的作用是关闭socket_create()或者socket_accept()所建立的套接字
				socket_close($accept_resource);
			}
		}while(true);
		socket_close($socket);	//工作完毕，关闭套接字
	
	在上面代码中，先使用socket_create()函数创建一个套接字对象，使用socket_bind()函数为套接字对象绑定具体的IP和端口。绑定成功后，
使用socket_listen()函数不断监听端口号的通讯变化。
	然后，在一个无限循环中，如果接受到客户发过来的请求套接字，则从接收的套接字中读取用户请求的字符串信息，并回写一条信息进行响
应。
	最后，关闭接收的套接字。如果进程结束，则再关闭服务器端创建的套接字对象。
	第2步，新建客户端处理脚本，保存为client.php。然后输入下面代码：
	<?php
		//创建一个socket套接字
		$socket=socket_create(AF_INET,SOCK_STREAM,SOL_TCP);
		//设置socket连接选项，下面两行代码可以省略
		//接收套接字的最大超时时间为1秒，后面是微秒单位超时时间，设置为0，表示不管它
		socket_set_option($socket,SOL_SOCKET,SO_RCVTIMEO,array('sec'=>1,'usec'=>0));
		//发送给套接字的最大超时时间为6秒
		socket_set_option($socket,SOL_SOCKET,SO_SNDTIMEO,array('sec'=>6,'usec'=>0));
		//连接服务器端的套接字，建立客户端与服务器端的套接字联系
		if(socket_connect($socket,'192.168.1.121','8888')==false){
			echo '连接套接字失败'.socket_strerror(socket_last_error());
		}else{
			$msg='Hi,socket!I am xuduo.';
			//转为GBK编码，避免乱码问题，应根据编码情况而定
			// $msg=mb_convert_encoding($msg,'GBK','UTF-8');
			//向服务端写入字符串信息
			if(socket_write($socket,$msg,strlen($msg))==false){
				echo '套接字写入失败'.socket_strerror(socket_last_error());
			}else{
				echo '套接字写入成功'.PHP_EOL;
				//读取服务端返回来的套接字信息
				while($callback=socket_read($socket,1024)){
					echo '服务器端返回信息：'.PHP_EOL.$callback;
				}
			}
		}
		socket_close($socket);
	
	在上面的代码中，先使用socket_create()函数创建一个套接字对象，可以根据需要使用socket_set_option()函数设置套接字对象的设置选
项。
	使用socket_connect()函数为套接字对象连接到服务器端的IP和端口。连接成功后，使用socket_write()函数向服务器端套接字发送一个请
求信息。
	然后，请求成功之后，在一个循环中，不断尝试接收服务器端响应的信息，并显示出来。
	如果接收失败，或者接收结束，则关闭客户端创建的套接字对象。
	第3步，在Linux的"Terminal"命令行窗口中，输入下面一行代码，回车运行程序。让服务器端的命令持续运行，不要关闭。
	$ /usr/local/php/bin/php ./server.php
	注意：
	php命令必须加入环境变量中。如果没有加入环境变量，则需要进入php运行命令目录，使用绝对命令运行。具体目录需要根据本地的PHP程序
	安装目录而定。
	第4步，在浏览器中访问http://myframe.hd/client.php或者继续打开一个Terminal输入如下命令，使用PHP运行客户端脚本。
	$ /usr/local/php/bin/php ./client.php
21.2.5 案例：处理多个连接
	在服务器端，先要对已经连接的socket进行存储和识别。每一个socket代表一个用户，如何关联和查询用户信息与socket的对应就是一个问
题，这里主要应用了文件描述符。
	PHP创建的socket类似于int值为34之类的资源类型，我们可以使用(int)或intval()函数把socket转换为一个唯一的ID值，从而可以实现用一
个类索引数组来存储socket资源和对应的用户信息：
	$connect_sockets=array(
		(int)$socket=>array(
			'resource'=>$socket,
			'name'=>$name,
			'ip'=>$ip,
			'port'=>$port,
			... 
		)
	)
	服务器处理多个连接，需要用到socket_select()，函数，具体用法如下：
	int socket_select(array &$read,array &$write,array &$except,int $tv_sec[,int $tv_usec=])
	socket_select()函数把可读、可写、异常的socket分别放入$read、$write、$except数组中，然后返回状态改变的socket的数目，如果发生
了错误，函数将返回false。
	该函数能够获取read、write数组中活跃的socket，并且把不活跃的socket从数组中删除。这是一个同步方法，必须得到响应之后才会继续下
一步，常用在同步非阻塞IO。
	提示：
	·新连接到来时，被监听的端口是活跃的。如果是新数据到来时，或者客户端关闭连接时，活跃的是对应客户端socket，而不是服务器上被监
听的端口。
	·如果客户端发来的信息没有被读走，则socket_select将会始终显示客户端是活跃的，并将其保存在read数组中。
	·如果客户端先关闭，则必须手动关闭服务器上相对应的客户端socket；否则socket_select也始终显示该客户端活跃。这与新连接到来，但
是没有用socket_accept把它读出来，导致监听的端口一直活跃是一样的。
	[示例]下面示例简单演示了多个连接的处理方法。
	第1步，设计服务器端脚本。新建server.php，输入以下代码：
	<?php
		$readfds=array();
		$writefds=array();
		$sock=socket_create_listen(8008);
		socket_set_nonblock($sock);	//非阻塞
		socket_getsockname($sock,$addr,$port);
		print 'Server Listening on '.$addr.':'.$port."\n";	0.0.0.0	可以通过127.0.0.1连接
		$readfds[(int)$sock]=$sock;
		$conn=socket_accept($sock);
		$readfds[]=$conn;
		$e=null;
		$t=100;
		$i=1;
		while(true){
			echo "No.$i\n";
			//当select处于等待时，两个客户端中甲先发数据来，则socket_select会在readfds中保留甲的socket，并往下运行，另一个客户端的
			//socket就被丢弃了，所以再次循环时，变成只监听甲了，这个可以在新循环中把所有链接的客户端socket再次加进readfds中，避免逻
			//辑错误
			echo @socket_select($readfds,$writefds,$e,$t)."\n";
			var_dump($readfds);
			if(in_array($sock,$readfds)){
				echo '8008 port is activity'."\n";
				$readfds[]=socket_accept($sock);
			}
			//将读取的资源输出
			foreach($readfds as $s){
				if($s!=$sock){
					//新连接到来时，被监听的端口是活跃的，如果是新数据到来或者客户端关闭时，活跃的是对应的客户端socket，而不是服务
					//上被监听的端口
					//如果客户端发来的信息没有被读走，则socket_select将会始终显示客户端是活跃的，并将其保存在readfds数组中
					//如果客户端先关闭，则必须手动关闭服务器上相对应的客户端socket；否则socket_select也始终显示该客户端活跃
					//(这个道理跟"有新连接到来然后没有用socket_accept把它读出来，导致监听的端口一直活跃"是一样的
					$result=@socket_read($s,1024);
					socket_write($s,$result,strlen($result));
					if($result===false){
						$err_code=socket_last_error();
						$err_test=socket_strerror($err_code);
						echo 'client '.(int)$s.' has closed ['.$err_code.':'.$err_test.']'."\n";
						//手动关闭客户端，最好清除一下$readfds数组中对应的元素
						socket_shutdown($s);
						socket_close($s);
					}else{
						echo $result;
					}
				}
			}
			usleep(3000000);
			$readfds[(int)$sock]=$sock;
			$i++;
		}
	在上面脚本中，先使用socket_create_listen()创建一个socket，监听8008端口，并把该服务器端套接字以关联的形式存入$readfds[]数组。
使用socket_set_nonblock()函数设置套接字为非阻塞模式运行。使用socket_getsocketname()函数获取套接字的IP和端口号，并输出显示。使用
socket_accept()函数读取客户端套接字，并以索引形式存入$readfds[]。
	在一个无限循环中，使用socket_select()函数选取活跃套接字，然后再使用foreach语句处理每一个活跃套接字，读取每个套接字的请求信
息，并响应给客户端套接字。
	第2步，新建客户端处理脚本，保存为client.php。然后输入下面代码：
	<?php
		set_time_limit(0);	//永久执行直到程序结束
		$client_socket=socket_create(AF_INET,SOCK_STREAM,SOL_TCP);	//创建套接字
		socket_connect($client_socket,'127.0.0.1','8008');	//连接服务器端套接字
		$send='Hi,socket!I am xuduo.';
		socket_write($client_socket,$send);	//发送请求信息
		$response=socket_read($client_socket,1024);	//读取响应信息
		echo 'Server:'.$response;
		socket_close($client_socket);	//关闭套接字	
	第3步，在Linux的"Terminal"命令行窗口中，输入下面一行代码，回车运行程序。让服务器端的命令持续运行，不要关闭。在浏览器中预览
PHP客户端脚本。
	$ /usr/local/php/bin/php ./server.php	
	
	
	
	
	
	
	
	
	
	

	
	
	
	
	
	