第2章 初识PHP7源码整体框架
	本章将从整体上分析PHP7的源码结构。读者可以通过这一章初步了解一下PHP7核心源码中ext、main、sapi、TSRM、Zend目录下都有哪些文件，
以及各自的功能是什么。此外，本章还以一段示例代码介绍了PHP7代码的执行流程。通过对PHP7执行流程的初步了解，可以为后面章节的深入研究
打好基础。
2.1 PHP7语言的执行原理
	我们常用的高级语言有很多种，比较出名的有C\C++、Python、PHP、Go、Pascal等。而这些语言根据运行的方式不同，大体分为两种：编译型
语言和解释性语言。
	其中，编译型语言包括C\C++、Pascal、Go等。这里说的编译时指在应用源程序执行之前，就将程序源代码"翻译"成汇编语言，然后进一步根
据软硬件环境编译成目标文件。一般称完成编译工作的工具为编译器。而解释性语言，在程序运行时才被"翻译"为机器语言。但是执行一次"翻译"
一次，所以执行效率低。解释器的工作就是解释型语言中，负责"翻译"源代码的程序。
	下面会更详细地讨论一下编译型语言和解释性语言的运行方式。
2.1.1 编译型语言与解释型语言
	我们知道，对应一段C语言代码，需要经过预编译、编译、汇编和链接，才能成为可执行的二进制文件。以hello.c为例：
	#include<stdio.h>
	int main(){
		printf("hello world");
		return 1;
	}
	对于这段C代码，main是程序入口函数，实现的功能是打印字符串"hello world"到屏幕上。编译和执行过程如下图所示。
	第1步：C语言代码预处理(比如依赖处理、宏替换等)。如以上代码示例，#include<stdio.h>就				源程序梗概
会在预处理阶段被替换。																				   ↓
	第2步：编译。编译器会把C语言翻译成汇编语言程序，一条C语言通常编译为多条汇编代码。同				预处理器
时编译器会对程序进行优化，生成目标汇编程序。														   ↓
	第3步：编译得到的汇编语言通过汇编器再汇编成目标程序hello.o。									源程序
	第4步：链接。程序中往往包含一些共享目标文件，如示例程序中的printf()函数，位于静态库，			   ↓
需要经过链接器(如Unix连接器ld)进行链接。															目标汇编程序
	以C语言为代表的编译型语言，代码发生更新都要经过以上步骤。										   ↓
	我们在本章对编译型语言与解释型语言的区别。的理解，立足于源代码被编译成目标平台CPU指令			汇编器
的时机。对于编译型语言，编译结果已经是针对当前CPU体系的指令；而解释型语言，需要先编译成中			   ↓
间码，再经由该解释型语言的特定虚拟机，翻译成特定CPU体系的指令执行。解释型语言是在运行过程			可重定位机器码
中，翻译为目标平台的指令。常说解释性语言"慢"，主要也是慢在这。										   ↓











