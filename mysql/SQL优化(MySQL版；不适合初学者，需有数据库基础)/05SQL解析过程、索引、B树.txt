SQL优化
	原因：性能低、执行时间太长、等待时间太长、SQL语句欠佳(单表查询一般没什么问题，主要是连接查询，左连接右连接)、索引失效、
	服务器参数设置不合理(缓冲、线程数)
	a.SQL:
		编写过程：
			select (distinct) .. from .. join .. on .. where .. group by .. having .. order by .. limit .. 
		解析过程：
			from .. join .. on .. where .. group by .. having .. select (distinct) .. order by .. limit .. 
		解析过程和编写过程不一致
	b.SQL优化，主要就是在优化索引(重中之重)
		索引：相当于书的目录
		索引：index是帮助mysql高效获取数据的数据结构，索引是数据结构(树：B树[默认]、hash树)
		eg.														B树↓(小的放左大的放右)
			硬件地址	id	name	age(加索引[哪个列都可以])				50->0x09
			0x09		1	zs		50							23->0x3a				56->0x6f
			0x3a		2	zs1		23						22		33							62		
			0xbc		3	zs2		22					20				44	
			0x6f		4	zs3		56
						5	zs4		33
						6	ls		44
						7	ls1		20
						8	ls2		62
					student
			select * from student where age=33;
				不加索引：5次
				加索引：3次
		索引的弊端：
			1.索引本身很大，可以存放在内存/硬盘(通常为硬盘)
			2.索引不是索引情况均适用：a.少量数据	b.频繁更新的字段	c.很是使用的列[用不上就没有必要加了]
			3.索引确实可以提高查询的效率，但是会降低增删改的效率(要维护索引，要改两次)
				大部分在查询，查询对性能的影响比较大[很划算，增删改]
		优势：
			1.提高查询的效率(降低了io的使用率)	客户端----服务端(IO)[链接，输入输出流]
			2.降低cpu使用率(.. order by age desc[不需要排序，索引排好了，B树索引本身就是一个排好序的结构，因此在排序时可以
				直接使用])